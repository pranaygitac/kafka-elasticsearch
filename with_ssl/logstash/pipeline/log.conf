input {
  beats {
    port => 5045
    ssl => true
    #ssl_certificate_authorities => ["/usr/share/logstash/cert/ca/ca.crt"]
    ssl_certificate => "/usr/share/logstash/cert/${LOGSTASH_HOST_NAME}/${LOGSTASH_HOST_NAME}.crt"
    ssl_key => "/usr/share/logstash/cert/${LOGSTASH_HOST_NAME}/${LOGSTASH_HOST_NAME}.pkcs8.key"
    #ssl_verify_mode => "force_peer"
  }
}

filter {
    # mutate {
    #     add_field => { "logstash.hostname" => "%{[container][name]}" }
    # }
     mutate {
        add_field => { "logstash.hostname" => "${LOGSTASH_HOST_NAME}" }
    }
    mutate {
        convert => { "logstash.hostname" => "string" }
     }   
}


output {
  # stdout {
  #       codec => rubydebug
  #   }
       if "filebeat" in [agent][type] {
  elasticsearch {
        hosts => ['http://es01.com:9200']
        user => 'elastic'
        password => 'pranay'
        #template_name => "backup_app_indextemp"
        #ilm_enabled => true
        #index => "backup"
        ilm_rollover_alias => "logstash_filebeat_logs"
        ilm_pattern => "{now/d}-000001"
        ilm_policy => "backup_app_ILM"
    }
       }
       if [agent][type] == "metricbeat" {
  elasticsearch {
        hosts => ['http://es01.com:9200']
        user => 'elastic'
        password => 'pranay'
        #template_name => "backup_app_indextemp"
        #ilm_enabled => true
        #index => "backup"
        ilm_rollover_alias => "logstash_metric_ssl"
        ilm_pattern => "{now/d}-000001"
        ilm_policy => "backup_app_ILM"
    }
       }
  #Logstash require all outputs to succeed 
  #before the batch is considered complete do that is expected behaviour    
 }
